#!KAMAILIO
#########################################################################################################
#
#       Kamailio Proxy
#       Jose Luis Verdeguer <verdeguer@zoonsuite.com>
#
#########################################################################################################

#!define WITH_ANTIFLOOD

####### Defines #########

#!define IPADDRESS "MY_IP_ADDRESS"
#!define PBX_IPADDRESS "MY_PBX_ADDRESS"

#!define FLAG_FROM_PBX 1
#!define FLAG_FROM_DEVICE 2


####### Global Parameters #########

listen=udp:IPADDRESS:5060
listen=tcp:IPADDRESS:5060

# Debug level
debug=2
memdbg=4
memlog=5

log_stderror=no
fork=yes
children=4
async_workers=4

####### TCP params #######

# Enables TCP
disable_tcp=no

auto_aliases=no
log_facility=LOG_LOCAL0
onsend_route_reply=yes
wdir="/tmp"

# Import user values
import_file "/var/www/html/kamailio-local.cfg"

#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

# Database access
#!define DBURL  "mysql://kamailio:STRONG_KAMAILIO_PASSWORD@localhost/kamailio"

####### Modules Section ########

mpath="/usr/local/lib64/kamailio/modules/"

loadmodule "tm.so"
loadmodule "kex.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "ctl.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "htable.so"
loadmodule "tmx.so"
loadmodule "path.so"
loadmodule "sqlops.so"
loadmodule "db_mysql.so"
loadmodule "permissions.so"
loadmodule "geoip.so"

#!ifdef WITH_ANTIFLOOD
	loadmodule "pike.so"
#!endif

# XLOG
modparam("xlog", "log_facility", "LOG_LOCAL0")
#log_prefix="{$mt $hdr(CSeq) $ci} "

# CTL
modparam("ctl", "binrpc", "unix:/tmp/kamailio_ctl")

# SQL OPS
modparam("sqlops","sqlcon","cb=>mysql://security:STRONG_WEB_PASSWORD@localhost/security")

# PERMISSIONS
modparam("permissions", "db_url", DBURL)

# GeoIP
modparam("geoip", "path", "/etc/kamailio/GeoLiteCity.dat")

#!ifdef WITH_ANTIFLOOD 
	modparam("pike", "sampling_time_unit", 10)    # period in seconds for sampling
	modparam("pike", "reqs_density_per_unit", 30) # requests allowed per sampling_time_unit before blocking
	modparam("pike", "remove_latency", 120)       # how long the IP address will be kept in memory after the last request

	# HTABLE
	modparam("htable", "htable", "ipban=>size=8;autoexpire=600") # IP ban (10 minutes)
#!endif

####### Routing Logic ########

request_route {
	# per request initial checks
	route(CHECK_SOURCE_IP);

	route(REQINIT);

	if (is_method("OPTIONS")) {
		force_rport();
		send_reply("200", "Hi there");
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	if (is_method("REGISTER")) {
		add_path();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)
	if (is_method("INVITE|REFER")) {
		record_route();
	}

	if (isflagset(FLAG_FROM_PBX)) {
		if (is_method("INVITE")) xlog("L_INFO", "[FROM PBX TO DEVICE] $fU->$tU - $du - $proto");
	} else {
		# set destination to your PBX
		$du = "sip:"+PBX_IPADDRESS+":5060";
		rewritehost(PBX_IPADDRESS);

		if (is_method("INVITE")) xlog("L_INFO", "[FROM DEVICE TO PBX] - $fU->$tU - $du - $proto");
	}

	route(RELAY);
}

route[SECURITY] {
	if (isflagset(FLAG_FROM_DEVICE)) {
#!ifdef WITH_ANTIFLOOD
		# Check if the IP is already blocked
		if($sht(ipban=>$si) != $null) {
			xlog("L_ALERT", "[Antiflood] request from a blocked IP address ($si:$sp)");
			exit;
		}
#!endif

		route(DEFAULT);

		# If policy by default is block all, only allow whitelisted
		if ($avp(default) == "block") {
			$avp(allow) = 0;

			$avp(type) = 'country';
			route(WHITELISTED);
			if ($avp(allow) < $avp(matches)) {
				$avp(type) = 'ua';
				$avp(value) = $ua;
				route(WHITELISTED);
			}
			if ($avp(allow) < $avp(matches)) {
				$avp(type) = 'ip';
				$avp(value) = $si;
				route(WHITELISTED);
			}
			if ($avp(allow) < $avp(matches)) {
				$avp(type) = 'domain';
				$avp(value) = $fd;
				route(WHITELISTED);
			}
			if ($avp(allow) < $avp(matches)) {
				xlog("L_ALERT", "Policy by default is drop. Message blocked - $si - $fU - $rU - $ua - $fd (matches $avp(allow)/$avp(matches))");
				$sht(ipban=>$si) = 1;
				exit;
			}
		}
		else {
			$avp(block) = 0;
			route(BLACKLISTED_COUNTRY);
			if ($avp(block) != 1) route(BLACKLISTED_UA);
			if ($avp(block) != 1) route(BLACKLISTED_IP);
			if ($avp(block) != 1) route(BLACKLISTED_USER);
			if ($avp(block) != 1) route(BLACKLISTED_DOMAIN);
		}

		route(SECURITY_DST);
		route(SECURITY_DOS);
		route(SECURITY_SQL);

		# The call has passed all tests
		if (is_method("OPTIONS") || is_method("INVITE") || is_method("REGISTER"))
			sql_query_async("cb", "INSERT INTO iplog (callid, ipsrc, method, proto, country, useragent, ru, caller, callee, au, message, code, reason) VALUES ('$(ci{sql.val.str})', '$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', '$mb', '$rs', '$rr')");
	}
}

### DEFAULT POLICY

route[DEFAULT] {
	$avp(default) = "block";
	$avp(matches) = 1;
	sql_query("cb", "SELECT value, matches FROM rules WHERE name='firewall'", "ra");
	if ( $dbr(ra=>rows) > 0 ) {
		$avp(default) = $dbr(ra=>[0,0]);
		$avp(matches) = $dbr(ra=>[0,1]);
	}
	sql_result_free("ra");
}


### WHITELIST

route[WHITELISTED] {
	if ($avp(type) == "country" && geoip_match("$si", "src")) sql_query("cb", "SELECT id FROM whitelist WHERE type='$avp(type)' AND value='$gip(src=>cc)'", "ra");
	else if ($avp(type) == "ua")                              sql_query("cb", "SELECT id FROM whitelist WHERE type='$avp(type)' AND value=substring('$avp(value)', 1, length(value))", "ra");
	else                                                      sql_query("cb", "SELECT id FROM whitelist WHERE type='$avp(type)' AND value='$avp(value)'", "ra");

	if ( $dbr(ra=>rows) > 0 ) $avp(allow) = $avp(allow) + 1;

	sql_result_free("ra");
}


### BLACKLIST

route[BLACKLISTED_COUNTRY] {
	# Check if the source country is blacklisted
	if (geoip_match("$si", "src")) {
		sql_query("cb", "SELECT ban, action, code, text FROM blacklist WHERE type='country' AND value='$gip(src=>cc)'", "ra");
		if ( $dbr(ra=>rows) > 0 ) {
			$avp(ban) = $dbr(ra=>[0,0]);
			$avp(action) = $dbr(ra=>[0,1]);
			$avp(code) = $(dbr(ra=>[0,2]){s.int});
			$avp(text) = $dbr(ra=>[0,3]);
			sql_result_free("ra");

			if ($avp(ban) == "yes") $sht(ipban=>$si) = 1;

			$avp(detail) = "[Blacklist country] Received "+$rm+" from a blacklisted country ("+$gip(src=>cc)+")! ("+$si+":"+$sp+")";

			if ($avp(action) == "response") {
				send_reply("$avp(code)", "$avp(text)");
				$avp(detail) = $avp(detail) + " ... sending <"+$avp(code)+" "+$avp(text)+">";
			}
			else
				$avp(detail) = $avp(detail) + " ... sending DROP";

			xlog("L_ALERT", "$avp(detail)");
			sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'country', '$avp(detail)', '$mb')");
			exit;
		}

		sql_result_free("ra");
	}
}

route[BLACKLISTED_UA] {
	# Check if the UserAgent is blacklisted
	sql_query("cb", "SELECT ban, action, code, text FROM blacklist WHERE type='ua' AND value=substring('$ua', 1, length(value))", "ra");
	if ( $dbr(ra=>rows) > 0 ) {
		$avp(ban) = $dbr(ra=>[0,0]);
		$avp(action) = $dbr(ra=>[0,1]);
		$avp(code) = $(dbr(ra=>[0,2]){s.int});
		$avp(text) = $dbr(ra=>[0,3]);
		sql_result_free("ra");

		if ($avp(ban) == "yes") $sht(ipban=>$si) = 1;

		$avp(detail) = "[Blacklist UA] Received "+$rm+" from a blacklisted UserAgent "+$ua+" ("+$si+":"+$sp+")";

		if ($avp(action) == "response") {
			send_reply("$avp(code)", "$avp(text)");
			$avp(detail) = $avp(detail) + " ... sending <"+$avp(code)+" "+$avp(text)+">";
		}
		else
			$avp(detail) = $avp(detail) + " ... sending DROP";

		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'ua', '$avp(detail)', '$mb')");
		exit;
	}

	sql_result_free("ra");
}

route[BLACKLISTED_IP] {
	# Check if the IP address is in the blacklist
	sql_query("cb", "SELECT ban, action, code, text FROM blacklist WHERE type='ip' AND value='$si'", "ra");
	if ( $dbr(ra=>rows) > 0 ) {
		$avp(ban) = $dbr(ra=>[0,0]);
		$avp(action) = $dbr(ra=>[0,1]);
		$avp(code) = $(dbr(ra=>[0,2]){s.int});
		$avp(text) = $dbr(ra=>[0,3]);
		sql_result_free("ra");

		if ($avp(ban) == "yes") $sht(ipban=>$si) = 1;

		$avp(detail) = "[Blacklist IP] Received "+$rm+" from a blacklisted IP ("+$si+":"+$sp+")";

		if ($avp(action) == "response") {
			send_reply("$avp(code)", "$avp(text)");
			$avp(detail) = $avp(detail) + " ... sending <"+$avp(code)+" "+$avp(text)+">";
		}
		else
			$avp(detail) = $avp(detail) + " ... sending DROP";

		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'ip', '$avp(detail)', '$mb')");
		exit;
	}

	sql_result_free("ra");
}

route[BLACKLISTED_USER] {
	# Check if the From user or To user are in the blacklist
	sql_query("cb", "SELECT ban, action, code, text FROM blacklist WHERE type='user' AND (value='$aU' OR value='$fU' OR value='$tU' OR value='$fn' OR CONCAT('\"', value, '\"')='$fn')", "ra");
	if ( $dbr(ra=>rows) > 0 ) {
		$avp(ban) = $dbr(ra=>[0,0]);
		$avp(action) = $dbr(ra=>[0,1]);
		$avp(code) = $(dbr(ra=>[0,2]){s.int});
		$avp(text) = $dbr(ra=>[0,3]);
		sql_result_free("ra");

		if ($avp(ban) == "yes") $sht(ipban=>$si) = 1;

		$avp(detail) = "[Blacklist User] Received "+$rm+" from a blacklisted user ("+$si+":"+$sp+")";

		if ($avp(action) == "response") {
			send_reply("$avp(code)", "$avp(text)");
			$avp(detail) = $avp(detail) + " ... sending <"+$avp(code)+" "+$avp(text)+">";
		}
		else
			$avp(detail) = $avp(detail) + " ... sending DROP";

		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'user', '$avp(detail)', '$mb')");
		exit;
	}

	sql_result_free("ra");
}

route[BLACKLISTED_DOMAIN] {
	# Check if the domain is in the blacklist
	sql_query("cb", "SELECT ban, action, code, text FROM blacklist WHERE type='domain' AND value='$fd'", "ra");
	if ( $dbr(ra=>rows) > 0 ) {
		$avp(ban) = $dbr(ra=>[0,0]);
		$avp(action) = $dbr(ra=>[0,1]);
		$avp(code) = $(dbr(ra=>[0,2]){s.int});
		$avp(text) = $dbr(ra=>[0,3]);
		sql_result_free("ra");

		if ($avp(ban) == "yes") $sht(ipban=>$si) = 1;

		$avp(detail) = "[Blacklist Domain] Received "+$rm+" from a blacklisted domain <"+$fd+"> ("+$si+":"+$sp+")";

		if ($avp(action) == "response") {
			send_reply("$avp(code)", "$avp(text)");
			$avp(detail) = $avp(detail) + " ... sending <"+$avp(code)+" "+$avp(text)+">";
		}
		else
			$avp(detail) = $avp(detail) + " ... sending DROP";

		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'domain', '$avp(detail)', '$mb')");
		exit;
	}

	sql_result_free("ra");
}

### DESTINATION NUMBER

route[SECURITY_DST] {
	# Check if the destination is allowed
	if (is_method("INVITE") && $(tU{s.len}) > 3) {
		$avp(prefix) = $tU;
		$avp(country) = "";
		$avp(cont) = $(avp(prefix){s.len}) - 1;

		if ($(avp(prefix){s.substr,0,2}) != "00" && $(avp(prefix){s.substr,0,2}) != "34") $avp(prefix) = "34" + $avp(prefix);
		while ($(avp(prefix){s.substr,0,1}) == "0") $avp(prefix) = $(avp(prefix){s.substr,1,0});

		while ($avp(country) == "" && $avp(prefix) != "" && $avp(cont) > 0) {
			sql_query("cb", "SELECT country FROM destinations WHERE prefix='$avp(prefix)'", "ra");

			if ( $dbr(ra=>rows) > 0 ) {
				$avp(country) = $dbr(ra=>[0,0]);
			}
			else {
				$avp(prefix) = $(avp(prefix){s.substr, 0, $avp(cont)});
			}
	
			$avp(cont) = $avp(cont) - 1;
		}

		if ($avp(country) != "") {
			sql_query("cb", "SELECT country FROM destinations_deny WHERE country='$avp(country)'", "ra");
			if ( $dbr(ra=>rows) > 0 ) {
				$avp(country) = $dbr(ra=>[0,0]);
				sql_result_free("ra");

				$avp(detail) = "[Destination] Is not possible to call to "+$tU+" because the destination is not allowed ("+$si+":"+$sp+")";

				xlog("L_ALERT", "$avp(detail)");
				sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'destination', '$avp(detail)', '$mb')");
				send_reply("403", "Not Allowed");
				exit;
			}
		}

		sql_result_free("ra");
	}
}

### PIKE

route[SECURITY_DOS] {
#!ifdef WITH_ANTIFLOOD
	# Flood detection from same IP and traffic ban for a while. Excluded from pike: my ip, AS-es, trusted IPs and known users
	$var(group) = allow_address_group($si, $sp);

	if ($var(group) != -1) {
		xlog("L_INFO", "[Antiflood] $si is not checked against antiflood (allowed source for grp '$var(group)')");
	} else if (allow_trusted($si, 'any')) {
		xlog("L_INFO", "[Antiflood] $si is not checked against antiflood (IP added in antiflood trusted IPs)");
	} else {
		if($sht(ipban=>$si) != $null) {
			# IP is already blocked
			xlog("L_ALERT", "[Antiflood] request from a blocked IP address ($si:$sp)");
			sql_result_free("ra");
			exit;
		}

		if (!pike_check_req()) {
			# Flood detected. Blocking IP
			$avp(detail) = "[Antiflood] pike blocking IP address ("+$si+":"+$sp+")";
			xlog("L_ALERT", "$avp(detail)");
			$sht(ipban=>$si) = 1;
			sql_result_free("ra");
			sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'pike' '$avp(detail)', '$mb')");
			exit;
		}
	}

	sql_result_free("ra");
#!endif
}

### SQL INJECTION

route[SECURITY_SQL] {
	# SQL injection on auth user?
	if ($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)|(\%60)" && $au != $null) {
		$avp(detail) = "[SQLi] Received an sql injection attack in auth user "+$aU+" ("+$si+":"+$sp+") ... sending DROP";
		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'sqli', '$avp(detail)', '$mb')");
		exit;
	}

	# SQL injection on destination number?
	if ($rU =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)|(\%60)") {
		$avp(detail) = "[SQLi] Received an sql injection attack in destination number "+$rU+" ("+$si+":"+$sp+") ... sending DROP";
		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'sqli', '$avp(detail)', '$mb')");
		exit;
	}

	# SQL injection on from user?
	if ($fU =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)|(\%60)") {
		$avp(detail) = "[SQLi] Received an sql injection attack in from user "+$fU+" ("+$si+":"+$sp+") ... sending DROP";
		xlog("L_ALERT", "$avp(detail)");
		sql_query_async("cb", "INSERT INTO blocked (ipsrc, method, proto, country, useragent, ru, caller, callee, au, type, detail, message) VALUES ('$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', 'sqli', '$avp(detail)', '$mb')");
		exit;
	}
}

route[REQINIT] {
	route(SECURITY);

	if (!sanity_check()) {
		xlog("L_WARN", "[$ci] Message from $si:$sp is insane");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		xlog("L_WARN", "[$ci] Too many hops for SIP message from $si:$sp");
		send_reply("483", "Too Many Hops");
		exit;
	}

	if ($si == IPADDRESS) {
		xlog("L_WARN", "[$ci] Dropping message from $si:$sp");
		exit;
	}
}

route[CHECK_SOURCE_IP] {
        if ($si == PBX_IPADDRESS) {
                setflag(FLAG_FROM_PBX);
        } else {
                setflag(FLAG_FROM_DEVICE);
        }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
        if (!has_totag()) return;

        # sequential request withing a dialog should
        # take the path determined by record-routing
        if (loose_route()) {
                if ( is_method("NOTIFY") ) {
                        # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
                        record_route();
                }
                route(RELAY);
                exit;
        }

        if ( is_method("ACK") ) {
                if ( t_check_trans() ) {
                        # no loose-route, but stateful ACK;
                        # must be an ACK after a 487
                        # or e.g. 404 from upstream server
                        route(RELAY);
                        exit;
                } else {
                        # ACK without matching transaction ... ignore and discard
                        exit;
                }
        }
	if (is_method("NOTIFY")) {
		route(RELAY);
	}
        sl_send_reply("404","Not here");
        exit;
}

route[RELAY] {
	t_on_reply("MANAGE_REPLY");
        if (!t_relay()) {
                sl_reply_error();
        }
        exit;
}

# Reply generic route (additional, for all replies)
onreply_route[MANAGE_REPLY] {
	if (is_method("OPTIONS")) return;

	sql_query_async("cb", "INSERT INTO iplog (callid, ipsrc, method, proto, country, useragent, ru, caller, callee, au, message, code, reason) VALUES ('$(ci{sql.val.str})', '$si', '$rm', '$proto', '$gip(src=>cc)', '$(ua{sql.val.str})', '$(ru{sql.val.str})', '$(fU{sql.val.str})', '$(tU{sql.val.str})', '$(au{sql.val.str})', '$mb', '$rs', '$rr')");
}

